---

unattended_upgrades_package_ensure: 'present'
unattended_upgrades_service_ensure: 'started'
unattended_upgrades_service_enable: true

#####################################################################
# 20auto-upgrades
#####################################################################

# Do "apt-get update" automatically every n-days (0=disable)
# APT::Periodic::Update-Package-Lists "1";
unattended_upgrades_update_package_list: '1'

# Do "apt-get upgrade --download-only" every n-days (0=disable)
# APT::Periodic::Download-Upgradeable-Packages "1";
unattended_upgrades_download_upgradable_packages: ''

# Do "apt-get autoclean" every n-days (0=disable)
# APT::Periodic::AutocleanInterval "21";
unattended_upgrades_autoclean_interval: ''

# Run the "unattended-upgrade" security upgrade script
# every n-days (0=disabled)
# Requires the package "unattended-upgrades" and will write
# a log in /var/log/unattended-upgrades
# APT::Periodic::Unattended-Upgrade "1";
unattended_upgrades_upgrade: '1'

#####################################################################
# 50unattended_upgrades
#####################################################################

# Note that in Ubuntu security updates may pull in new dependencies
# from non-security sources (e.g. chromium). By allowing the release
# pocket these get automatically pulled in.
# Unattended-Upgrade::Allowed-Origins []
unattended_upgrades_allowed_origins:
  - '${distro_id}:${distro_codename}'
  - '${distro_id}:${distro_codename}-security'
  - '${distro_id}ESMApps:${distro_codename}-apps-security'
  - '${distro_id}ESM:${distro_codename}-infra-security'

# Python regular expressions, matching packages to exclude from upgrading
# Unattended-Upgrade::Package-Blacklist []
unattended_upgrades_package_blacklist: []

# This option controls whether the development release of Ubuntu will be
# upgraded automatically. Valid values are "true", "false", and "auto".
# Unattended-Upgrade::DevRelease "auto";
unattended_upgrades_devrelease: 'auto'

# This option allows you to control if on a unclean dpkg exit
# unattended-upgrades will automatically run
#   dpkg --force-confold --configure -a
# The default is true, to ensure updates keep getting installed
# Unattended-Upgrade::AutoFixInterruptedDpkg "true";
unattended_upgrades_autofix_interrupt_dpkg: true

# Split the upgrade into the smallest possible chunks so that
# they can be interrupted with SIGTERM. This makes the upgrade
# a bit slower but it has the benefit that shutdown while a upgrade
# is running is possible (with a small delay)
# Unattended-Upgrade::MinimalSteps "true";
unattended_upgrades_minimal_steps: true

# Install all updates when the machine is shutting down
# instead of doing it in the background while the machine is running.
# This will (obviously) make shutdown slower.
# Unattended-upgrades increases logind's InhibitDelayMaxSec to 30s.
# This allows more time for unattended-upgrades to shut down gracefully
# or even install a few packages in InstallOnShutdown mode, but is still a
# big step back from the 30 minutes allowed for InstallOnShutdown previously.
# Users enabling InstallOnShutdown mode are advised to increase
# InhibitDelayMaxSec even further, possibly to 30 minutes.
# Unattended-Upgrade::InstallOnShutdown "false";
unattended_upgrades_install_on_shutdown: false

# Send email to this address for problems or packages upgrades
# If empty or unset then no email is sent, make sure that you
# have a working mail setup on your system. A package that provides
# 'mailx' must be installed. E.g. "user@example.com"
# Unattended-Upgrade::Mail "";
unattended_upgrades_mailto: ''

# Set this value to one of:
#    "always", "only-on-error" or "on-change"
# If this is not set, then any legacy MailOnlyOnError (boolean) value
# is used to chose between "only-on-error" and "on-change"
# Unattended-Upgrade::MailReport "on-change";
unattended_upgrades_mailreport: ''

# Remove unused automatically installed kernel-related packages
# (kernel images, kernel headers and kernel version locked tools).
# Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
unattended_upgrades_remove_unused_kernel: true

# Do automatic removal of newly unused dependencies after the upgrade
# Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
unattended_upgrades_remove_new_unused_dependencies: true

# Do automatic removal of unused packages after the upgrade
# (equivalent to apt-get autoremove)
# Unattended-Upgrade::Remove-Unused-Dependencies "false";
unattended_upgrades_remove_unused_dependencies: false

# Automatically reboot *WITHOUT CONFIRMATION* if
#  the file /var/run/reboot-required is found after the upgrade
# Unattended-Upgrade::Automatic-Reboot "false";
unattended_upgrades_automatic_reboot: false

# Automatically reboot even if there are users currently logged in
# when Unattended-Upgrade::Automatic-Reboot is set to true
# Unattended-Upgrade::Automatic-Reboot-WithUsers "true";
unattended_upgrades_automatic_reboot_withuser: true

# If automatic reboot is enabled and needed, reboot at the specific
# time instead of immediately
#  Default: "now"
# Unattended-Upgrade::Automatic-Reboot-Time "now";
unattended_upgrades_automatic_reboot_time: "now"

# Enable bandwidth limit
# Use apt bandwidth limit feature, this example limits the download
# speed to 70kb/sec
# Acquire::http::Dl-Limit "70";
unattended_upgrades_download_limit: false
unattended_upgrades_download_limit_value: '70'

# Enable logging to syslog. Default is False
# Unattended-Upgrade::SyslogEnable "false";
unattended_upgrades_syslog_enable: false

# Specify syslog facility. Default is daemon
# Unattended-Upgrade::SyslogFacility "daemon";
unattended_upgrades_syslog_facility: 'daemon'

# Download and install upgrades only on AC power
# (i.e. skip or gracefully stop updates on battery)
# Unattended-Upgrade::OnlyOnACPower "true";
unattended_upgrades_only_acpower: true

# Download and install upgrades only on non-metered connection
# (i.e. skip or gracefully stop updates on a metered connection)
unattended_upgrades_skip_nonmeterd_connection: true

# Verbose logging
# Unattended-Upgrade::Verbose "false";
unattended_upgrades_verbose: false

# Print debugging information both in unattended-upgrades and
# in unattended-upgrade-shutdown
# Unattended-Upgrade::Debug "false";
unattended_upgrades_debug: false

# Allow package downgrade if Pin-Priority exceeds 1000
# Unattended-Upgrade::Allow-downgrade "false";
unattended_upgrades_allow_downgrade: false
